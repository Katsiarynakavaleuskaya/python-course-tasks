# -*- coding: utf-8 -*-
"""mvp_dating_pairs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NTUZCZGrhsktTQQ_wS_8_70VRlFwAPnD
"""

# -*- coding: utf-8 -*-
"""
Task 3: MVP of a dating service.

Hypothesis: The best matches are made if we sort both lists of names
(alphabetically) and pair people by matching indices after sorting.
However, we do NOT create any pairs if someone may be left unmatched.

Examples:

boys = ['Peter', 'Alex', 'John', 'Arthur', 'Richard']
girls = ['Kate', 'Liza', 'Kira', 'Emma', 'Trisha']

Output:
Ideal pairs:
Alex — Emma
Arthur — Kate
John — Kira
Peter — Liza
Richard — Trisha

boys = ['Peter', 'Alex', 'John', 'Arthur', 'Richard', 'Michael']
girls = ['Kate', 'Liza', 'Kira', 'Emma', 'Trisha']

Output:
Attention: someone may be left without a pair!
"""

# Create improvised lists of boys and girls (manual for this task).
boys = ['Peter', 'Alex', 'John', 'Arthur', 'Richard', 'Michael']
girls = ['Kate', 'Liza', 'Kira', 'Emma', 'Trisha']

# Sort both lists alphabetically.
boys_sorted = sorted(boys)
girls_sorted = sorted(girls)

# For the MVP, we use a greedy algorithm: pairs are formed by matching
# indices after sorting the lists. This approach is simple and fast, allowing
# us to quickly test the working hypothesis. We do NOT do full matching
# (all possible pairs), in order to avoid excessive complexity.
# The goal of MVP is to test a simple strategy, not to find all optimal matches.

if len(boys_sorted) == len(girls_sorted) and len(boys_sorted) > 0:
    print('Ideal pairs:')
    for i in range(len(boys_sorted)):
        # Indices in Python start at 0, but for users we count from 1.
        print(f'{i + 1}: {boys_sorted[i]} — {girls_sorted[i]}')
else:
    print('Attention: someone may be left without a pair!')